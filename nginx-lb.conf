events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Use Docker's embedded DNS for dynamic upstream resolution
    resolver 127.0.0.11 valid=10s ipv6=off;
    resolver_timeout 5s;

    upstream api_backend {
        zone api_backend 64k;
        # Balance across API replicas (resolved via Docker DNS)
        least_conn;
        # Re-resolve the service name periodically to pick up all A records
        server audio-transcription-api:4443 resolve max_fails=2 fail_timeout=10s;

        # Keep connections alive for better performance
        keepalive 32;
    }

    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Load balancing configuration
        location / {
            proxy_pass http://api_backend;  # HTTP for internal communication
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Keepalive to upstream
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Retry logic for failed requests
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;

            # Timeout settings for long-running transcription requests
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # Buffer settings for large file uploads
            client_max_body_size 100M;
            proxy_request_buffering off;
            proxy_buffering off;

            # Error handling
            error_page 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }

        # Health check endpoint - restricted for security
        location /health {
            # Allow only internal access or specific IPs
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://api_backend/health;  # HTTP for internal communication
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            access_log off;
        }

        # External health check endpoint - minimal info for monitoring
        location /health/external {
            proxy_pass http://api_backend/health/external;
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            access_log off;
        }
    }
}
